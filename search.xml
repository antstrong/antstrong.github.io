<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[工作中常用的几种jsonp处理跨域的方式]]></title>
      <url>https://antstrong.github.io/2017/04/07/%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8Djsonp%E5%A4%84%E7%90%86%E8%B7%A8%E5%9F%9F%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="工作中常用的几种jsonp处理跨域的方式"><a href="#工作中常用的几种jsonp处理跨域的方式" class="headerlink" title="工作中常用的几种jsonp处理跨域的方式"></a>工作中常用的几种jsonp处理跨域的方式</h2><h4 id="一-用jQuery的ajax方法"><a href="#一-用jQuery的ajax方法" class="headerlink" title="一.用jQuery的ajax方法"></a>一.用jQuery的ajax方法</h4><p>先上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">'url'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;&#125;,</div><div class="line">    <span class="attr">type</span>: <span class="string">'get'</span>,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">"jsonp"</span>,</div><div class="line">    <span class="attr">jsonp</span>: <span class="string">'callback'</span>,</div><div class="line">   &#125;)</div></pre></td></tr></table></figure></p>
<p>其中的三个关键参数是</p>
<ol>
<li>type：请求方法，由于是跨域请求，所以肯定是get；</li>
<li>dataType：一般我们这个参数的值都是json，但是由于这里用jsonp处理跨域，所以参数是’jsonp’；</li>
<li>jsonp: 这个参数最为重要，这个值是我们本地定义的一个函数，当用jsonp处理跨域时，会把这个函数带到后端，然后后端用此函数将实际返回的数据用callback包装起来返回给我们(自己的浅显理解)。<br><strong> 这里有个坑需要特别强调下 </strong><br>通常情况下我们的请求是通过按钮触发的，这时候我们就有了如下的代码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">      <span class="attr">url</span>: <span class="string">''</span>,</div><div class="line">      <span class="attr">data</span>: &#123;&#125;,</div><div class="line">      <span class="attr">type</span>: <span class="string">'get'</span>,</div><div class="line">      <span class="attr">async</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">dataType</span>: <span class="string">"jsonp"</span>,</div><div class="line">      <span class="attr">jsonp</span>: <span class="string">'callback'</span>,</div><div class="line">    &#125;)</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (res.errno === <span class="number">0</span>) &#123;</div><div class="line">        pop_show();</div><div class="line">        $(<span class="string">'#success'</span>).show();</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.errno === <span class="number">-26</span>) &#123;</div><div class="line">        pop_show();</div><div class="line">        $(<span class="string">'#fail'</span>).show();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">      	alert(res.desc)</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如上，打开控制台，如果后台没有问题会报callback not defined，这时候我们必须加上window.callback = callback以解决此问题。</p>
<h4 id="二-用jQuery的-getJSON方法"><a href="#二-用jQuery的-getJSON方法" class="headerlink" title="二.用jQuery的$.getJSON方法"></a>二.用jQuery的$.getJSON方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">'http://user.tvesou.com/wechat/get_jssdk_sign?app=1&amp;url='</span> + <span class="built_in">encodeURIComponent</span>(location.href.split(<span class="string">'#'</span>)[<span class="number">0</span>]) + <span class="string">'&amp;callback=?'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;)</div></pre></td></tr></table></figure>
<p>运用jQuery的$.getJSON这种方法跨域更为简单，在请求的第一个参数也即是url后面带上需要传递的参数，最后必须带上<strong>&amp;callback=?</strong>，后面的一个参数则是请求成功后的回调函数。其实这中方法的关键就是在url后面带上<strong>&amp;callback=?</strong>啦，其他的参数和正常情况下完全一样。</p>
<h4 id="三-最后一种就是利用vue-resource"><a href="#三-最后一种就是利用vue-resource" class="headerlink" title="三.最后一种就是利用vue-resource"></a>三.最后一种就是利用vue-resource</h4><p>下面是我平时封装的一个函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cpost</span>(<span class="params">v, cdata</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> nwtime = getNowTime() <span class="comment">//时间</span></div><div class="line">  <span class="keyword">let</span> sign = getSign(nwtime) <span class="comment">//时间加固定字符串生成的md5</span></div><div class="line">  <span class="keyword">let</span> param = &#123;</div><div class="line">    <span class="attr">nwtime</span>: nwtime,</div><div class="line">    <span class="attr">sign</span>: sign</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> HOST = <span class="string">'固定url'</span> + cdata.url</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> cdata.postData) &#123;</div><div class="line">    param[key] = cdata.postData[key]</div><div class="line">  &#125;</div><div class="line">  v.$http.jsonp(HOST, &#123;<span class="attr">params</span>: param&#125;)</div><div class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</div><div class="line">      response = response.body</div><div class="line">      cdata.callback(response)</div><div class="line">    &#125;, response =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'网络错误！'</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实这种方法vue-resource的jsonp和jQuery的 $.getJSON差不多，就不多说了，这里想说明的是vue-resource中的一个坑（其实也不算坑，是自己文档没有看仔细），记得最开始接触的折腾了很久，这个需要注意的点就是，在vue-resource中我们传递给后端的参数都必须这样进行封装：{params: ’我们自己的参数‘}，也即是我们传递给vue-resource的是一个对象，params属性是固定的，后面的值就是要传递的参数。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[两个移动端样式记录]]></title>
      <url>https://antstrong.github.io/2017/03/07/%E4%B8%A4%E4%B8%AA%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A0%B7%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<ol>
<li><p>移动端底部内容区域超过屏幕高度，有蒙层的情况下底部仍可滑动</p>
<blockquote>
<p>默认情况下<code>html</code>, <code>body</code>元素的<code>overflow</code>属性均为<code>auto</code>，因此当有蒙层的情况下需要将前面两个元素的<code>overflow</code>设置为<code>hidden</code>，当去掉蒙层的时候需要重新设置<code>overflow</code>属性的值为<code>auto</code>以确保页面的正常，下面为两个实现此功能的函数。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为了防止蒙层底部页面滑动。注：必须对html和body都设置overflow:hidden，移动端才能禁止蒙层底部页面滑动</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop_show</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'html'</span>).attr(<span class="string">"style"</span>, <span class="string">"overflow:hidden;height:100%;"</span>);</div><div class="line">  $(<span class="string">'body'</span>).attr(<span class="string">"style"</span>, <span class="string">"overflow:hidden;height:100%;"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//蒙层关闭时body和html的overflow还原；</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop_close</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'html'</span>).attr(<span class="string">"style"</span>, <span class="string">"overflow:auto;"</span>);</div><div class="line">  $(<span class="string">'body'</span>).attr(<span class="string">"style"</span>, <span class="string">"overflow:auto;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>text-indent属性</p>
<blockquote>
<p>text-indent定义:<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-indent" target="_blank" rel="external"><code>text-indent</code> 属性 规定了 一个元素 首行 文本内容之前应该有多少水平空格。Horizontal spacing is with respect to the left (or right, for right-to-left layout) edge of the containing block element’s box.</a>  </p>
</blockquote>
<p>当<code>text-indent</code>的值设置为数字时，单位是肯定有的（这里有个梗：开始我自己的记忆深处这个属性一直是有单位的，但是当我请教别人时，他觉得没有单位，当时由于没仔细观察没应用单位时确实去掉了我当时的bug，不过原因是不带单位这个属性根本不起作用啊，有木有），要么是<code>em</code>要么是<code>px</code>要么是百分比（此时相对于父元素的宽度）。</p>
<h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p><img src="https://ws1.sinaimg.cn/large/aef6d2d7gy1fdd5ed2v5uj20ae0at3z3" alt=""></p>
<p>如上图，右边的胜负平的图片，这里我的实现是用图片作为背景，然后将字体应用<code>text-indent</code>以实现隐藏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;narrow f_l&quot;&gt;&lt;span</div><div class="line">            :class=&quot;&#123;vector: item.result===&apos;胜&apos;,lose: item.result===&apos;负&apos;,draw: item.result===&apos;平&apos;&#125;&quot;&gt;&#123;&#123;item.result&#125;&#125;&lt;/span&gt;</div><div class="line">          &lt;/div&gt;</div></pre></td></tr></table></figure>
<p>这里针对不同的结果，应用不同的背景图片，css如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.vector</span>, <span class="selector-class">.lose</span>, <span class="selector-class">.unknow</span>, <span class="selector-class">.draw</span></div><div class="line">          <span class="selector-tag">display</span> <span class="selector-tag">inline-block</span></div><div class="line">          <span class="selector-tag">width</span> 28<span class="selector-tag">px</span></div><div class="line">          <span class="selector-tag">height</span> 13<span class="selector-tag">px</span></div><div class="line">          <span class="selector-tag">line-height</span> 13<span class="selector-tag">px</span></div><div class="line">          <span class="selector-tag">transform</span> <span class="selector-tag">skew</span>(<span class="selector-tag">-30deg</span>) <span class="comment">/*设置倾斜度为-30*/</span></div><div class="line">          <span class="selector-tag">color</span> <span class="selector-id">#FFF</span></div><div class="line">          <span class="selector-tag">text-align</span> <span class="selector-tag">center</span></div><div class="line">          <span class="selector-tag">text-indent</span> 2000<span class="selector-tag">px</span></div></pre></td></tr></table></figure>
<p><strong>注意上面<code>css</code>中的第一行，可以算是text-indent的又一个特性，其适用的元素是block containers，对行内元素没有任何作用</strong></p>
<p>​    这时的效果在chrome下的模拟器中表现的一切都正常，但是当你在手机端去查看的时候会发现，屏幕居然可以左右滑动，为什么呢？当我把所有的项目的所有<code>css</code>都看了一遍之后也没发现个所以然，最后请教大神才发现问题所在，但是大神开始一眼看出是text-indent多了单位，当把<code>px</code>去掉之后，左右可滑动的bug确实解决了，但是后面我仔细观察才发现原来字并没有缩进，而是和背景图重合在了一起，后面查阅资料才发现<code>text-indent</code>的如上知识点。因为原来的记忆中貌似<code>text-indent</code>一般都设置为<code>-999px</code>，果然当做了如上修改后，一切都恢复正常：文字被缩进到屏幕之外，左右也没有了滑动效果。</p>
</li>
<li><p>总结：所以，细节决定成败，看似很基础的知识，很渺小的问题往往会起决定性的作用。</p>
<p>​</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo博客next主题折腾记]]></title>
      <url>https://antstrong.github.io/2016/12/22/hexo%E5%8D%9A%E5%AE%A2next%E4%B8%BB%E9%A2%98%E6%8A%98%E8%85%BE%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>首先，我很清楚现在网络上关于用hexo搭建博客的文章已经不计其数，但是在自己搭建完本博客之后还是忍不住要回顾一下整个流程，有两方面的考虑：</p>
<ol>
<li>对知识的一个总结</li>
<li>因为这是自己第一次写文章，也可以练习一下文笔和对Markdown的使用</li>
</ol>
<h2 id="搭建博客的初衷"><a href="#搭建博客的初衷" class="headerlink" title="搭建博客的初衷"></a>搭建博客的初衷</h2><hr>
<ul>
<li>当然是为了装比（不不，作为一个程序员当然是为了慢慢树立属于自己的品牌）</li>
<li>因为平常自己会看一些技术书籍，以前都是用纸质笔记本在写读书笔记和总结之类的，但是为了方便今后自己回顾和提倡绿色环保的理念还是选择了搭建一个博客</li>
</ul>
<h2 id="利用hexo搭建博客的步骤："><a href="#利用hexo搭建博客的步骤：" class="headerlink" title="利用hexo搭建博客的步骤："></a>利用hexo搭建博客的步骤：</h2><hr>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>当然前提条件是你已经安装了node.js，安装node.js的同时会自带安装全球最大的包管理工具NPM，然后打开命令行工具依次 输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g //全局安装hexo</div><div class="line">hexo init blog //在你自己想创建博客的目录下初始化博客项目</div><div class="line"><span class="built_in">cd</span> blog </div><div class="line">npm install //安装依赖</div><div class="line">hexo server //开启hexo服务器</div></pre></td></tr></table></figure></p>
<p>执行完最后一条命令后你应该看到类似INFO  Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>. Press Ctrl+C to stop.的语句，那么访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 即可看到默认的landscape主题的网站</p>
<h3 id="下载next主题并切换主题"><a href="#下载next主题并切换主题" class="headerlink" title="下载next主题并切换主题"></a>下载next主题并切换主题</h3><p>下载就不多说，利用git直接克隆github上最新的next，具体可以参考<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next使用</a>，然后在站点根目录，也即是blog目录下找到_config.yml 文件，在文件中找到 theme 关键字修改为如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<p>同样为了验证我们的主题切换是否成功，命令行工具输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<h3 id="主题配置中踩过的坑"><a href="#主题配置中踩过的坑" class="headerlink" title="主题配置中踩过的坑"></a>主题配置中踩过的坑</h3><p>当然上一步我们已经成功的将我们的博客主题切换到了next，但肯定有很多骚年不满足于目前next的表现，于是就开始了next主题个性化和第三方功能的折腾当中，官网已经说的很详细，具体见<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next使用</a>，下面就我自己踩过的几个坑做个特殊的说明：</p>
<h4 id="多说user-id大坑"><a href="#多说user-id大坑" class="headerlink" title="多说user_id大坑"></a>多说user_id大坑</h4><p>为你的博客添加多说评论很简单，只需要注册一个多说账号，然后在站点配置文件 _config.yml 中增加字段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duoshuo_shortname: 你的多说域名中.duoshuo.com前面的字段</div></pre></td></tr></table></figure>
<p>启用UA功能也很简单，只需要在next主题配置文件 _config.yml  中找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: true</div><div class="line">  user_id: 0</div><div class="line">  admin_nickname: 博主</div></pre></td></tr></table></figure></p>
<p>然后将ua_enable字段设置为true即可，但是这个admin_enable字段是干什么用的呢？这个字段是为了在评论区突出显示博主自己而需要配置的，当然为了彰显出主场的气势，我也准备将这个功能打开，于是我将admin_enable字段设置为了true,但是问题来了，官网上明显说的是当admin_enable设置为true是必须设置user_id和admin_nickname，admin_nickname字段好说，随便写个自己看着舒服的名字就可以了，可是这个user_id是什么鬼？于是我差点没将我的<a href="http://antstrong.duoshuo.com/" target="_blank" rel="external">多说账号</a>里面的每一个字段都当成user_id一遍又一遍的测试，最后还是无功而返，试着各种搜索也没有找到相关的解决方案。最后，在官网和主题配置文件里面找到了答案，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Make duoshuo show UA</div><div class="line"># user_id must NOT be null when admin_enable is true!</div><div class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</div><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: true</div><div class="line">  user_id: </div><div class="line">  admin_nickname:</div></pre></td></tr></table></figure></p>
<p>别人明明说了让你去<a href="http://dev.duoshuo.com" target="_blank" rel="external">http://dev.duoshuo.com</a> 这个多说的开发者中心拿取user_id你却跑到<a href="http://antstrong.duoshuo.com" target="_blank" rel="external">http://antstrong.duoshuo.com</a> 去闹了个天翻地覆，还有就是官网也明明给了你答案，如下图：<br><img src="https://ws2.sinaimg.cn/large/aef6d2d7gw1fazlfa07glj20ny07pjt2.jpg" alt="user_id说明"><br>这时候真的是想说句日了狗了，同时也说明了自己不够细心，学东西太过于急切，也算是一个不大不小的教训吧，对了，最后贴一张最终的效果图吧：<br><img src="https://ws4.sinaimg.cn/large/aef6d2d7gw1fazln06d87j20j906k3yy.jpg" alt="效果图"></p>
<h4 id="打赏功能之坑"><a href="#打赏功能之坑" class="headerlink" title="打赏功能之坑"></a>打赏功能之坑</h4><p>   打赏功能不必多说，开始主要是不知道要怎么添加这个功能，后面发现我正在使用的next主题已经集成了此功能，只需要在主题配置文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 文章末尾显示打赏</div><div class="line">reward_comment: 你的鼓励，我的动力！</div><div class="line">wechatpay: 微信支付图片URL</div><div class="line">alipay: 支付宝图片URL</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p>当然为了搭建这个博客，来来去去花了自己不少时间，因为自己也算一个小白，在很多方面都没有经验，所以只有靠着搜索引擎慢慢的收集资料，然后慢慢的消化慢慢的做出成果，最终，在踩了不少坑之后，这边笔记也相当于给自己的一个交代吧！哈哈，终于是完成了，当然完成也是一个开始，后面自己会尽力坚持在博客上多分享一些技术性的文章和自己的学习笔记，Live beautiful, come on!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://antstrong.github.io/2016/12/05/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
